#!/usr/bin/env bash

##############################################
#	Author: Nidia Achrys
#	Project: tardis
#	Version: 1.0
#
#	Usage: tardis [command] [args]
#
#	Description:
#		This utility manages backups
##############################################

version='1.0'
author='Nidia Achrys'

# Source common script functions
source $SCRIPTS/01-commons.sh

#############
# Core Code #
#############

# Dependencies
dependency "nano"
dependency "rsync"

# Config
CONFDIR="${HOME}/.config/tardisrsync"
EXCLUSION_FILE="${CONFDIR}/exclusions.conf"
CONFIG="${CONFDIR}/default-disk.conf"

# Get the target directory and manifest file
GETDIR()
{
  	[ -f "${CONFIG}" ] && BACKUPDISK=$(cat "${CONFIG}" | grep "DEFAULT_DISK=" | sed -e 's|DEFAULT_DISK=||')

  	if [ -n "${1}" ]; then
		TARGET="${1}"
	else
		[ -z "${BACKUPDISK}" ] && PRINT "Tardis: You must specify a directory to back up or set a default!" && exit 1
		TARGET="${BACKUPDISK}"
	fi

	[ ! -d "${TARGET}" ] && PRINT "Tardis: That directory does not exist!" && exit 1

	MANIFEST=${TARGET}/tardis-manifest.conf
	return 0
}

# Create a backup in the target
BACKUP()
{
  	BACKUPNAME=$(date +"%Y-%m-%d_%H-%M-%S")

  	touch "${MANIFEST}"

	# HOME
	[ -f "${EXCLUSION_FILE}" ] && rsync -avhpru --exclude-from="${EXCLUSION_FILE}" --delete ${HOME} ${TARGET}
	[ ! -f "${EXCLUSION_FILE}" ] && rsync -avhpru --delete ${HOME} ${TARGET}

 	mv ${TARGET}/${USER} ${TARGET}/${BACKUPNAME}

	PRINT "Tardis: Finished backup!"
	PRINT "Tardis:  ${BACKUPNAME}" | tee -a ${MANIFEST}
	return 0
}

# Restore a backup from the target
RESTORE()
{
	BACKUPDIR="${TARGET}/${1}"

	[ ! -d "${BACKUPDIR}" ] && PRINT "Tardis: That backup does not exist!" && return 1

	for file in ${BACKUPDIR}/{.,}*
	do
		[ -d "${file}" ] && rsync --avhpru --delete "${file}" "${HOME}"
		[ -f "${file}" ] && rsync --avhpu --delete "${file}" "${HOME}"
	done

	PRINT "Tardis: '${BACKUPDIR}' restored."
	return 0
}

# Remove a backup
REMOVE()
{
	BACKUPDIR="${TARGET}/${1}"

	[ ! -d "${BACKUPDIR}" ] && PRINT "Tardis: That backup does not exist!" && exit 1

	read -p "Tardis: Are you sure you want to remove this backup? (y/N) " confirmation
	confirmation=`lowercase "${confirmation}"`

	[ "${confirmation}" == "y" ] && rm -rf "${BACKUPDIR}" && return 0
	[ "${confirmation}" == "yes" ] && rm -rf "${BACKUPDIR}" && return 0

	PRINT "Tardis: Cancelling..."
	return 0
}

# List all the previous backups in the target
LIST()
{
	FILES=${TARGET}/*/

	[ ! ${#FILES[@]} -gt 0 ] && PRINT "Tardis: There are no backups!" && return 1
	[ ! -f ${MANIFEST} ] && PRINT "Tardis: There are no backups!" && return 1

	ls -F ${TARGET} | grep /\$
	return 0
}



# Enable cron
ENABLE_CRON()
{
	# Allow file and tab file
	local allow="/etc/cron.allow"
	local tab="/var/spool/cron/crontabs/${USER}"
	local lock="${TARGET}/.cron"
	
	# Create cron.allow, tab file, and lock file
	[ ! -f "${allow}" ] && sudo touch "${allow}"
	[ ! -f "${tab}" ] && sudo touch "${tab}"
	[ ! -f "${lock}" ] && touch "${lock}"

	# Check if the name of the user is in cron.allow, then add if it isn't
	local name="`cat ${allow} | grep ${USER}`"
	[ "${name}" != "${USER}" ] && PRINT "${USER}" | sudo tee -a "${allow}"

	# Add entry to tab & lock file
	local entry="@daily ${HOME}/.local/bin/tardis backup"
	PRINT "${entry}" | sudo tee -a "${tab}" >/dev/null 2>&1
	PRINT "${entry}" | tee -a "${lock}" >/dev/null 2>&1

	return 0
}

# Disable Cron
DISABLE_CRON()
{
	# Get the entry text and remove the cron lock
	local entry="`cat ${TARGET}/.cron`"
	rm -f "${TARGET}/.cron"

	# Tab file
	local tab="/var/spool/cron/crontabs/${USER}"

	# Remove the entry
	sudo sed -i "#${entry}#d" ${tab}
	# sudo cat ${tab} | sed "s|${entry}\n||g" | sudo tee ${tab}
	return 0
}

# Toggle Cron
TOGGLE_CRON()
{
	if [ ! -f "${TARGET}/.cron" ]
	then
		ENABLE_CRON
		PRINT "\nTardis: Automatic Backups Enabled\n"
	else
		DISABLE_CRON
		PRINT "\nTardis: Automatic Backups Disabled\n"
	fi

	return $?
}

# Set the default disk to look for when not specified on the command line
DEFAULT_TARGET()
{
	[ ! -d ${CONFDIR} ] && mkdir -p ${CONFDIR} && PRINT "Tardis: Created config file!"
	[ -z "${1}" ] && PRINT "Tardis: You must specify a directory to set as the default!" && return 1
	[ ! -d "${1}" ] && PRINT "Tardis: That is not a valid directory!" && return 1

	cat ${CONFIG} | grep -iv "DEFAULT_DISK=" > ${CONFIG}
	PRINT "DEFAULT_DISK=${1}" >> ${CONFIG}
	PRINT "Tardis: Set a default target!"
	return 0
}

# Edit the list of exclusions in $HOME/.config/tardisrsync/exclusions.conf
EXCLUSIONS()
{
	[ ! -d ${CONFDIR} ] && mkdir -p ${CONFDIR}
	[ ! -f ${EXCLUSION_FILE} ] && touch ${EXCLUSION_FILE} && PRINT "Tardis: Created exclusions file!"

	[ -z "${EDITOR}" ] && nano ${EXCLUSION_FILE} || ${EDITOR} ${EXCLUSION_FILE}

	PRINT "Tardis: Exclusions edited!" && return 0
}

# Print the list of exclusions listed in $HOME/.config/tardisrsync/exclusions.conf
PRINT_EXCLUSIONS()
{
	[ ! -e "${EXCLUSION_FILE}" ] && PRINT "Tardis: Exclusions have not been specified." && return 1
	cat ${EXCLUSION_FILE}
}

# Help Prompt
help_prompt()
{
	PRINT
	PRINT "Create, restore, and list backups."
	PRINT 
	PRINT "Usage: `SCRIPTNAME` [command] [args]"
	PRINT "Example: `SCRIPTNAME` backup <disk path>"
	PRINT 
	PRINT "Commands"
	PRINT "(b) backup\t\tCreate a backup"
	PRINT "(r) restore\t\tRestore a backup"
	PRINT "(d) delete\t\tDelete a backup"
	PRINT "(l) list\t\tList all backups"
	PRINT
	PRINT "Settings"
	PRINT "(a) toggle-automatic\tToggle automatic backups"
	PRINT "(t) default-target\tSet a default target for future backups"
	PRINT "(e) exclusions\t\tCreate or edit the exclusions file"
	PRINT "(p) print-exclusions\tPrint out every excluded file/directory name"
	PRINT 
	PRINT "Miscellaneous"
	PRINT "(h) help\t\tShow this prompt"
	PRINT "(v) version\t\tPrint the version of this script"
	return 0
}

cmd=`lowercase ${1}`

# Command line options
case "${cmd}" in
	b | backup )
		GETDIR $2
		BACKUP
    	;;
	r | restore)
		GETDIR $2
		RESTORE $3
		;;
	d | delete )
		GETDIR $2
		REMOVE
		;;
	l | list )
		GETDIR $2
		LIST
		;;
	a | toggle-automatic )
		GETDIR $2
		TOGGLE_CRON
		;;
	t | default-target )
		DEFAULT_TARGET $2
		;;
	e | exclusions )
		EXCLUSIONS
		;;
	p | print-exclusions)
		PRINT_EXCLUSIONS
		;;
	v | version )
		version
		;;
	\? | h | help )
		help_prompt
		;;
	* )
		[ -z "${cmd}" ] && help_prompt || invalid "${cmd}"
		;;
esac

# Exit the script with the last returned status code
exit $?
