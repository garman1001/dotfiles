#!/usr/bin/env bash
# Author: Nidia Achrys
# Project: tardis
# Version: 2.0
# Description:
#	This utility manages backups
#
# Usage: tardis [OPTION] [FLAGS]

CMDNAME=$(basename $0)
VERSIONNUM="1.0"

# Config
CONFDIR="${HOME}/.config/tardisrsync"
EXCLUSION_FILE="${CONFDIR}/exclusions.conf"
CONFIG="${CONFDIR}/default-disk.conf"

GETDIR()
{
  [ -f "${CONFIG}" ] && BACKUPDISK=$(cat "${CONFIG}" | grep "DEFAULT_DISK=" | sed -e 's|DEFAULT_DISK=||')

  if [ -n "${1}" ];
  then
    TARGET="${1}"
  else
    [ -z "${BACKUPDISK}" ] && echo "You must specify a directory to back up or set a default!" && exit 1
    TARGET="${BACKUPDISK}"
  fi

	[ ! -d "${TARGET}" ] && echo "That directory does not exist!" && exit 1

	MANIFEST=${TARGET}/tardis-manifest.conf
}

BACKUP()
{
	GETDIR $1
  BACKUPNAME=$(date +"%Y-%m-%d_%H-%M-%S")

  touch "${MANIFEST}"

	# HOME
	[ -e "${EXCLUSION_FILE}" ] && rsync -avhpru --exclude-from="${EXCLUSION_FILE}" --delete ${HOME} ${TARGET}
  [ ! -e "${EXCLUSION_FILE}" ] && rsync -avhpru --delete ${HOME} ${TARGET}

  mv ${TARGET}/${USER} ${TARGET}/${BACKUPNAME}

  echo "Finished backup!"
  echo "[SUCCESSFUL] ${BACKUPNAME}" | tee -a ${MANIFEST}
  exit 0
}

RESTORE()
{
	GETDIR $1
  BACKUPDIR="${TARGET}/${2}"

  [ ! -d "${BACKUPDIR}" ] && echo "That backup does not exist!" && exit 1

  for F in "${BACKUPDIR}/*"
  do
    file="${BACKUPDIR}/${F}"

    [ -d "${file}" ] && RSYNCDIR "${file}" "${HOME}"
    [ ! -d "${file}" ] && RSYNCFILE "${file}" "${HOME}"
  done

  for F in "${BACKUPDIR}/{.,}*"
  do
    file="${BACKUPDIR}/${F}"

    [ -d "${file}" ] && RSYNCDIR "${file}" "${HOME}"
    [ ! -d "${file}" ] && RSYNCFILE "${file}" "${HOME}"
  done

  echo "Finished restore!"
  exit 0
}

LIST()
{
	GETDIR $1
	FILES=${TARGET}/*

	[ ! ${#FILES[@]} -gt 0 ] && echo "There are no backups!" && exit 1
	[ ! -e ${MANIFEST} ] && echo "There are no backups!" && exit 1

	ls -ld ${TARGET}/*/
}

DEFAULT_TARGET()
{
  [ ! -d ${CONFDIR} ] && mkdir -p ${CONFDIR} && echo "Created config file!"
  [ -z "${1}" ] && echo "You must specify a directory to set as the default!" && exit 1
  [ ! -d "${1}" ] && echo "That is not a valid directory!" && exit 1

  cat ${CONFIG} | grep -iv "DEFAULT_DISK=" > ${CONFIG}
  echo "DEFAULT_DISK=${1}" >> ${CONFIG}
  echo "Set a default target!"
  exit 0
}

EXCLUSIONS()
{
  [ ! -d ${CONFDIR} ] && mkdir -p ${CONFDIR} && echo "Created exclusions file!"
  [ -z "${EDITOR}" ] && nano ${EXCLUSION_FILE} && echo "Exclusions edited!" && exit 0
  [ -n "${EDITOR}" ] && ${EDITOR} ${EXCLUSION_FILE} && echo "Exclusions edited!" && exit 0
}

PRINT_EXCLUSIONS()
{
  [ ! -e "${EXCLUSION_FILE}" ] && echo "Exclusions have not been specified." && exit 0
  cat ${EXCLUSION_FILE}
  exit 0
}

VERSION()
{
  echo "${CMDNAME} ${VERSIONNUM}"
  echo
  echo "Copyright (C)  Nidia Achrys"
  echo "License GPLv3+: GNU GPL version 3 or later https://gnu.org/licenses/gpl.html."
  echo "This is free software: you are free to change and redistribute it."
  echo "There is NO WARRANTY, to the extent permitted by law."
  echo
  echo "Written by Nidia Achrys."
  exit 0
}

HELP()
{
 echo -e "Usage: ${CMDNAME} [command]"
 echo
 echo -e "Create, restore, and list backups."
 echo
 echo "Commands"
 echo -e "\t-B, --backup\n\t\tCreate a backup"
 echo -e "\t-R, --restore\n\t\tRestore a backup"
 echo -e "\t-L, --list\n\t\tList all backups"
 echo
 echo "Settings"
 echo -e "\t-D, --default-target\n\t\tSet a default target for future backups"
 echo -e "\t-E, --exclusions\n\t\tCreate or edit the exclusions file"
 echo -e "\t-P, --print-exclusions\n\t\tPrint out every excluded file/directory name"
 echo 
 echo "Miscellaneous"
 echo -e "\t-v, --version\n\t\tPrint the version of this script"
 echo -e "\t-h, --help\n\t\tShow this prompt"
 exit 0
}

case "${1}" in
  -B | --backup )
    BACKUP $2
    ;;
  -R | --restore)
    RESTORE $2 $3
    ;;
  -L | --list )
    LIST $2
    ;;
  -D | --default-target )
    DEFAULT_TARGET $2
    ;;
  -E | --exclusions )
    EXCLUSIONS
    ;;
  -P | --print-exclusions)
    PRINT_EXCLUSIONS
    ;;
  -v | --version )
    VERSION
    ;;
  \? | -h | --help )
    HELP
    ;;
  * )
    echo -e "Invalid command."
    echo -e "See '${CMDNAME} --help' for a full list of commands."
    exit 1
    ;;
esac
