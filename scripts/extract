#!/usr/bin/env bash

##############################################
#	Author: Nidia Achrys
#	Project: extract
#	Version: 1.0
#
#	Usage: extract [command] [args]
#
#	Description:
#		Extract any archive file
##############################################

# Source common script functions
source $SCRIPTS/libs/01-api.sh

#############
# Help Menu #
#############

api.script.author "Nidia Achrys"
api.script.setVersion "1.0"

# Description/usage/examples
api.script.description "Extract different archive files."
api.script.usage "[file]"
api.script.example "./file.tar.gz"
api.script.example "types"

# CLI Commands
api.script.option "t" "types" "View a list of supported archive types"

#############
# Core Code #
#############

extract.types ()
{
	api.std.printLn 
	api.std.printLn "Supported file types:"
	api.std.printLn "- tar.bz2"
	api.std.printLn "- tar.gz"
	api.std.printLn "- bz2"
	api.std.printLn "- rar"
	api.std.printLn "- gz"
	api.std.printLn "- tar"
	api.std.printLn "- tbz2"
	api.std.printLn "- tgz"
	api.std.printLn "- zip"
	api.std.printLn "- Z"
	api.std.printLn "- 7z"
	api.std.printLn "- deb"
	api.std.printLn "- tar.xz"
	api.std.printLn "- tar.zst"
	api.std.printLn 
	return 0
}

extract.valid ()
{
	if [ ! -f "${1}" ]
	then
		api.std.failMsg "'${1}' is not a file."
	else
		api.std.failMsg "Unknown error"
	fi
}

case "${1}" in
	*.tar.bz2)
		api.required.command "tar"
		extract.valid ${1}
		tar xjf ${1}
		;;
	*.tar.gz)
		api.required.command "tar"
		extract.valid ${1}
		tar xzf ${1}
		;;
	*.bz2)
		api.required.command "bunzip"
		extract.valid ${1}
		bunzip ${1}
		;;
	*.rar)
		api.required.command "unrar"
		extract.valid ${1}
		unrar x ${1}
		;;
	*.gz)
		api.required.command "gunzip"
		extract.valid ${1}
		gunzip ${1}
		;;
	*.tar)
		api.required.command "tar"
		extract.valid ${1}
		tar xf ${1}
		;;
	*.tbz2)
		api.required.command "tar"
		extract.valid ${1}
		tar xjf ${1}
		;;
	*.tgz)
		api.required.command "tar"
		extract.valid ${1}
		tar xzf ${1}
		;;
	*.zip)
		api.required.command "unzip"
		extract.valid ${1}
		unzip ${1}
		;;
	*.Z)
		api.required.command "uncompress"
		extract.valid ${1}
		uncompress ${1}
		;;
	*.7z)
		api.required.command "7z"
		extract.valid ${1}
		7z x ${1}
		;;
	*.deb)
		api.required.command "ar"
		extract.valid ${1}
		ar x ${1}
		;;
	*.tar.xz)
		api.required.command "tar"
		extract.valid ${1}
		tar xf ${1}
		;;
	*.tar.zst)
		api.required.command "unzstd"
		extract.valid ${1}
		unzstd ${1}
		;;
	t | types )
		extract.types
		;;
	\? | h | help )
		api.script.help
		;;
	v | version )
		api.script.version
		;;
	*)
		if [[ -z "${1}" ]]
		then
			api.script.help
		else
			api.std.failMsg "'${1}' cannot be extracted."
		fi
		;;
esac
