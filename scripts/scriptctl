#!/usr/bin/env bash

##############################################
#	Author: Nidia Achrys
#	Project: scriptctl
#	Version: 1.0
#
#	Usage: scriptctl [command] [args]
#
#	Description:
#		This utility provides tools to create, edit, list,
#		and print shell scripts.
##############################################

version='1.0'
author='Nidia Achrys'

# Source common script functions
source $SCRIPTS/01-api.sh

#############
# Core Code #
#############

DEPENDENCY "nano"

default_shell="bash"

[[ -z "${SCRIPTS}" ]] && SCRIPTS="$HOME/.local/bin"

# If EDITOR is empty, or the EDITOR does not exist, use nano
[[ -z "${EDITOR}" ]] && EDITOR=nano
[[ `command -v ${EDITOR}` ]] || EDITOR=nano

# Functions

function TEMPLATE()
{
_template="#!/usr/bin/env ${default_shell}

##############################################
#	Author: ${author_name}
#	Project: ${scriptname}
#	Version: 1.0
#
#	Usage: ${scriptname} [command] [args]
#
#	Description:
#		${description}
##############################################

version='1.0'
author=''

# Source common script functions
source \$SCRIPTS/01-api.sh

#############
# Core Code #
#############

# This is where you put your script's functions, variables, logic, etc.

"
}

function getName()
{
    if [[ -z "${1}" ]]
    then
        read -p "Enter the name of the script: " scriptname
	else
		scriptname="${1}"
    fi
    script="${SCRIPTS}/${scriptname}"
    return 0
}

function createScript()
{
	getName "${1}"

	# Prompt for script information
	read -p "Shell Name > " default_shell
	read -p "Author Name > " author_name
	read -p "Description > " description

	TEMPLATE

    if [[ ! -e "${script}" ]]
    then
    	touch ${script}
    	PRINT "${_template}" > ${script}
    	
		${EDITOR} ${script}
    	chmod +x ${script}
    	
		LOG "${scriptname} created!"
    	return 0
    else
    	FAIL "${scriptname} already exists!"
    fi
}

function editScript()
{
	getName "${1}"

	if [[ -e "${script}" ]]
	then
		${EDITOR} ${script}
		LOG "${scriptname} edited!"
		
		return 0
	else
		LOG "${scriptname} does not exist!"
		read -p "Create script? Y\n: " answer

		answer=`LOWERCASE "${answer}"`
		[ "${answer}" = "y" ] && createScript || return 1
	fi
}

function removeScript()
{
	getName "${1}"

	if [[ -e "${script}" ]]
	then
		rm -f ${script}
		LOG "${scriptname} removed!"
		return 0
	else
		FAIL "${scriptname} does not exist!"
		return 1
	fi
}

function renameScript()
{
	getName "${1}"

	newName="${2}"
	newPath="${SCRIPTS}/${newName}"

	if [ -f "${script}" ] && [ ! -z "${newName}" ]
	then

		mv "${script}" "${SCRIPTS}/${newName}"

		LOG "Renamed '${script##*/}' to '${newName}'."
		return 0

	elif [ -z "${newName}" ]
	then

		read -p "What do you want the script to be called?" newName
		mv "${script}" "${SCRIPTS}/${newName}"

		LOG "Renamed '${script##*/}' to '${newName}'."
		return 0

	elif [ ! -f "${script}" ]
	then

		FAIL "Script '${script##*/}' does not exist!"
		return 1

	fi
}

function printScript()
{
	getName "${1}"

	if [[ -e "${script}" ]]
	then
		cat ${script}
		return 0
	else
		FAIL "${scriptname} does not exist!"
		return 1
	fi
}

function listScripts()
{
	ls -1 --color=auto $SCRIPTS
	return 0
}

function helpPrompt()
{
	PRINT "Create, edit, remove, or print scripts."
	PRINT 
	PRINT "Usage: `SCRIPTNAME` [command] [args]"
	PRINT "Example: `SCRIPTNAME` create torrentctl zsh"
	PRINT 
	PRINT "Commands:"
	PRINT "(c) create\t\tCreate a new script"
	PRINT "(e) edit\t\tEdit an existing script"
	PRINT "(r) rename\t\tRename an existing script"
	PRINT "(d) delete\t\tDelete an existing script"
	PRINT "(p) print\t\tPrint a script to STDOUT"
	PRINT "(l) list\t\tList all scripts"
	PRINT 
	PRINT "Miscellaneous:"
	PRINT "(h) help\t\tdisplay this help and exit"
	PRINT "(v) version\t\toutput version information and exit"
	return 0
}

# Create the scripts directory if it does not already exist.
[[ ! -d "${SCRIPTS}" ]] && mkdir ${SCRIPTS}

cmd=`LOWERCASE ${1}`

case "${cmd}" in
	c | create )
		createScript "${2}" "${3}"
		;;
	e | edit )
		editScript "${2}"
		;;
	r | rename )
		renameScript "${2}" "${3}"
		;;
	d | delete )
		removeScript "${2}"
		;;
	p | print )
		printScript "${2}"
		;;
	l | list )
		listScripts
		;;
	v | version )
		VERSION
		;;
	\? | h | help )
		helpPrompt
		;;
	* )
		[ -z "${cmd}" ] && helpPrompt || INVALID "${cmd}"
		;;
esac

# Exit the script with the last returned status code
exit $?
