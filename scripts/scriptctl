#!/usr/bin/env bash

##############################################
#	Author: Nidia Achrys
#	Project: scriptctl
#	Version: 1.0
#
#	Usage: scriptctl [command] [args]
#
#	Description:
#		This utility provides tools to create, edit, list,
#		and print shell scripts.
##############################################

version='1.0'
author='Nidia Achrys'

# Source common script functions
source $SCRIPTS/01-api.sh

#############
# Core Code #
#############

DEPENDENCY "nano"

# Set the scripts directory to $HOME/.local/bin if not already set
[[ -z "${SCRIPTS}" ]] && SCRIPTS="$HOME/.local/bin"

# If EDITOR is empty, or the specified EDITOR does not exist, use nano
[[ -z "${EDITOR}" ]] && EDITOR=nano
[[ `command -v ${EDITOR}` ]] || EDITOR=nano

# Script template string generator
function TEMPLATE()
{
_template="#!/usr/bin/env ${default_shell:=bash}

##############################################
#	Author: ${author_name:=Some Random Scripter}
#	Project: ${scriptname}
#	Version: 1.0
#
#	Usage: ${scriptname} [command] [args]
#
#	Description:
#		${description:=Blah Blah Blah}
##############################################

version='1.0'
author=''

# Source common script functions
source \$SCRIPTS/01-api.sh

#############
# Core Code #
#############

# This is where you put your script's functions, variables, logic, etc.

"
}

# Get the name of the script to manage
function getName()
{

    if [[ -z "${1}" ]]
    then

		# Prompt for a script name if one wasn't provided in the command line
        read -p "Enter the name of the script: " scriptname

	else

		# Set the script name to the first command line argument if one was provided.
		scriptname="${1}"

    fi

	# Set the script path
    script="${SCRIPTS}/${scriptname}"
    return 0
}

# Prompt for basic script information and create it
function createScript()
{
	getName "${1}"

	# Prompt for script information
	read -p "Shell Name > " default_shell
	read -p "Author Name > " author_name
	read -p "Description > " description

	# Generate the template
	TEMPLATE

    if [[ ! -f "${script}" ]]
    then

		# Create the script if it doesn't exist
    	touch ${script}

		# Print the template string to the script
    	PRINT "${_template}" > ${script}
    	
		# Edit the script
		${EDITOR} ${script}

		# Make the script executable
    	chmod +x ${script}
    	
		# Confirmation log
		LOG "${scriptname} created!"
    	return 0
    
	else
    
		# Fail if script exists
		FAIL "${scriptname} already exists!"
    
	fi
}

# Edit the contents of a script
function editScript()
{
	getName "${1}"

	if [[ -f "${script}" ]]
	then
	
		# Edit the script if it exists
		${EDITOR} ${script}

		# Confirmation
		LOG "${scriptname} edited!"
		
		return 0
	
	else
	
		# Error that the script doesn't exist
		ERROR "${scriptname} does not exist!"
		
		# Ask if the script should be created
		read -p "Create script? Y\n: " answer

		# Create the script if the answer to the prompt was 'y' or 'yes'
		answer=`LOWERCASE "${answer}"`
		[ "${answer}" = "y" ] && createScript ${scriptname} || return 1
	
	fi
}

# Delete a script
function removeScript()
{
	getName "${1}"

	if [[ -f "${script}" ]]
	then

		# Remove the script if it exists
		rm -f ${script}

		# Confirmation
		LOG "${scriptname} removed!"
		return 0

	else

		# Fail if the script doesn't exist
		FAIL "${scriptname} does not exist!"
		return 1

	fi
}

# Rename a script
function renameScript()
{
	getName "${1}"

	# Get the new name from the second command line argument
	newName="${2}"

	# Generate the new path based on the new name
	newPath="${SCRIPTS}/${newName}"

	# If the script exists and the newName string isn't empty:
	if [ -f "${script}" ] && [ ! -z "${newName}" ]
	then

		# Rename the script
		mv "${script}" "${SCRIPTS}/${newName}"

		# Confirmation
		LOG "Renamed '${script##*/}' to '${newName}'."
		return 0

	# If the newName string is empty:
	elif [ -z "${newName}" ]
	then

		# Prompt for a new name
		read -p "What do you want the script to be called?" newName

		# Rename the script
		mv "${script}" "${SCRIPTS}/${newName}"

		# Confirmation
		LOG "Renamed '${script##*/}' to '${newName}'."
		return 0

	# If the script doesn't exist:
	elif [ ! -f "${script}" ]
	then

		# Fail
		FAIL "Script '${script##*/}' does not exist!"
		return 1

	fi
}

# Print the script to the command line
function printScript()
{
	getName "${1}"

	# If the script exists
	if [[ -f "${script}" ]]
	then
		
		# Print out the script
		cat ${script}
		return 0
	
	# If the script doesn't exist:
	else
	
		# Fail
		FAIL "${scriptname} does not exist!"
		return 1
	
	fi
}

# List all files in the scripts directory
function listScripts()
{
	find $SCRIPTS/ -type f -executable -exec basename {} \;
	return 0
}

# Help prompt
function helpPrompt()
{
	PRINT "Create, edit, remove, or print scripts."
	PRINT 
	PRINT "Usage: `SCRIPTNAME` [command] [args]"
	PRINT "Example: `SCRIPTNAME` create torrentctl"
	PRINT 
	PRINT "Commands:"
	PRINT "(c) create\t\tCreate a new script"
	PRINT "(e) edit\t\tEdit an existing script"
	PRINT "(r) rename\t\tRename an existing script"
	PRINT "(d) delete\t\tDelete an existing script"
	PRINT "(p) print\t\tPrint a script to STDOUT"
	PRINT "(l) list\t\tList all scripts"
	PRINT 
	PRINT "Miscellaneous:"
	PRINT "(h) help\t\tdisplay this help and exit"
	PRINT "(v) version\t\toutput version information and exit"
	return 0
}

# Create the scripts directory if it does not already exist.
[[ ! -d "${SCRIPTS}" ]] && mkdir ${SCRIPTS}

# Set the subcommand to lowercase
cmd=`LOWERCASE ${1}`

case "${cmd}" in
	c | create )
		createScript "${2}" "${3}"
		;;
	e | edit )
		editScript "${2}"
		;;
	r | rename )
		renameScript "${2}" "${3}"
		;;
	d | delete )
		removeScript "${2}"
		;;
	p | print )
		printScript "${2}"
		;;
	l | list )
		listScripts
		;;
	v | version )
		VERSION
		;;
	\? | h | help )
		helpPrompt
		;;
	* )
		[ -z "${cmd}" ] && helpPrompt || INVALID "${cmd}"
		;;
esac

# Exit the script with the last returned status code
exit $?
