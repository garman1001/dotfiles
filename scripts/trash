#!/usr/bin/env bash

##############################################
#	Author: Nidia Achrys
#	Project: trash
#	Version: 1.0
#
#	Usage: trash [command] [args]
#
#	Description:
#		This utility manages your trash bin.
##############################################

version='1.0'
author='Nidia Achrys'

# Source common script functions
source $SCRIPTS/libs/01-api.sh

#############
# Core Code #
#############

# This is where you put your script's functions, variables, logic, etc.

declare -- TRASHINFO
declare -- FILENAME
declare -- FILEINFO
declare -- DELPATH
declare -- DELDATE
declare -- FILEPATH
declare -- FILEINFO
declare -- RESTOREPATH

TRASHDIRS=$HOME/.local/share/Trash
TRASHINFO=$TRASHDIRS/info
[ -z "$TRASH" ] && TRASH=$TRASHDIRS/files

trash.checkFile()
{
  if [ -n "$1" ];
  then
    FILE="$1"
  else
    api.std.failMsg "You must specify a FILE."
  fi
}

trash.getPath()
{
  confFile="${1}"
  api.std.printLn "$(grep -m 1 Path= ${confFile} | sed 's|Path=||')"
}

trash.getDate()
{
  confFile="${1}"
  api.std.printLn "$(grep -m 1 DeletionDate= ${confFile} | sed 's|DeletionDate=||')"
}

trash.files.add()
{
  trash.checkFile "$1"
  if [ -e "${FILE}" ];
  then
    FILENAME="$(basename ${FILE})"
    DELFILE="${TRASHINFO}/${FILE}.trashinfo"
    DELPATH=$(readlink -f ${FILE})
    DELDATE=$(date +"%Y-%m-%dT%H:%M:%S")

    api.std.printLn "[Trash Info]" > "${TRASHINFO}/${FILENAME}.trashinfo"
    api.std.printLn "Path=${DELPATH}" >> "${TRASHINFO}/${FILENAME}.trashinfo"
    api.std.printLn "DeletionDate=${DELDATE}" >> "${TRASHINFO}/${FILENAME}.trashinfo"
    mv ${FILE} ${TRASH}
    
    api.std.logMsg "Moved ${FILE} to the trash!"
    exit 0
  else
    api.std.failMsg "File '${FILE}' doesn't exist!"
  fi
}

trash.files.restore()
{
  trash.checkFile "$1"

  FILEPATH="${TRASH}/${FILE}"
  FILEINFO="${TRASHINFO}/${FILE}.trashinfo"

  if [ -f "${FILEINFO}" ] && [ -e "${FILEPATH}" ];
  then
    RESTOREPATH="$(trash.getPath ${FILEINFO})"
    
    mv "${FILEPATH}" "${RESTOREPATH}"
    rm -f "${FILEINFO}"

    api.std.logMsg "Restored ${FILE} to ${RESTOREPATH}!"
    exit 0
  else
    api.std.failMsg "File ${FILE} is not in the trash!"
  fi
}

trash.files.empty()
{
  local files=()

  # Create a list of all files in the trash, hidden and not hidden
  files=(`find ${TRASH} -maxdepth 1`)
  unset files[0]

  # Fail if there are no files in the trash
  [ ${#files[@]} -eq 0 ] && api.std.failMsg "There are no files in the trash!"

  # Remove all files from the trash
  for file in ${files[@]}
  do
    rm -rf $file
  done
  
  # Confirmation
  api.std.logMsg "Emptied the trash!"
  exit 0
}

trash.files.information()
{
  trash.checkFile "$1"

  FILEINFO=$TRASHINFO/"${FILE}.trashinfo"
  
  if [ -e "${FILEINFO}" ];
  then
    cat "${FILEINFO}"
    exit 0
  else
    api.std.failMsg "File does not have metadata / doesn't exist!"
  fi
}

trash.help()
{
  api.std.printLn 
  api.std.printLn "Manage your trash bin"
  api.std.printLn
  api.std.printLn "Usage: `api.script.name` [command] <file>"
  api.std.printLn "Example: `api.script.name` add <file>"
  api.std.printLn
  api.std.printLn "Commands:"
  api.std.printLn "(a) add\t\t\tAdd a FILE to the trash"
  api.std.printLn "(r) restore\t\tRestore a FILE from the trash"
  api.std.printLn "(e) empty\t\tEmpty the trash bin"
  api.std.printLn "(l) list\t\tList the contents of the trash bin"
  api.std.printLn "(i) info\t\tGet a FILE's trash metadata"
  api.std.printLn
  api.std.printLn "Miscellaneous"
  api.std.printLn "(h) help\t\tShow this prompt"
  api.std.printLn "(v) version\t\tPrint the version of this script"
}

cmd=`api.string.toLowerCase "${1}"`

case "${cmd}" in
  a | add )
    trash.files.add "${2}"
    ;;
  r | restore)
    trash.files.restore "${2}"
    ;;
  e | empty )
    trash.files.empty
    ;;
  l | list )
    ls --color=auto -alvhF --group-directories-first $TRASH 
    exit 0
    ;;
  i | info )
    trash.files.information "${2}"
    ;;
  v | version )
    api.script.version
    ;;
  \? | h | help )
    trash.help
    ;;
  * )
  	[ -z "${cmd}" ] && trash.help || api.errors.invalidCommand "${1}"
    ;;
esac
