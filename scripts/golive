#!/usr/bin/env bash

##############################################
#	Author: Nidia Achrys
#	Project: golive
#	Version: 1.0
#
#	Usage: golive [command] [args]
#
#	Description:
#		Force pulseaudio to use settings that allows
#		linux users to share audio via Discord's
#		golive feature
##############################################

version='1.0'
author='Nidia Achrys'

# Source common script functions
source $SCRIPTS/01-api.sh

#############
# Core Code #
#############

DEPENDENCY "pactl"

function setup() {
	pactl list short modules | grep -q 'Virtual_Sink' && return

	if [ -z "$MIC_SOURCE" ]; then
		first_source=$(pactl list short sources | head -1 | awk '{print $1;}') # e.g. 0
		pactl list short sources
		read -p ">> Source (input) number to use [$first_source]: " user_source
		[ -z "$user_source" ] && user_source=$first_source
		MIC_SOURCE=$user_source
		PRINT 
		first_sink=$(pactl list short sinks | head -1 | awk '{print $1;}') # e.g. 1
		pactl list short sinks
		read -p ">> Sink (output) number to use [$first_sink]: " user_sink
		[ -z "$user_sink" ] && user_sink=$first_sink
		OUTPUT_SINK=$user_sink
		PRINT 
	fi

	pactl load-module module-null-sink sink_name=Virtual_Output sink_properties=device.description=Virtual_Output > /dev/null
	pactl load-module module-null-sink sink_name=Virtual_Sink sink_properties=device.description=Virtual_Sink > /dev/null
	MIX_SOURCE=$(pactl list short sources | grep 'Virtual_Sink' | awk '{print $1;}') # e.g. 14

	pactl load-module module-loopback latency_msec=1 source=$MIC_SOURCE sink=Virtual_Output > /dev/null
	pactl load-module module-loopback latency_msec=1 source=$MIX_SOURCE sink=Virtual_Output > /dev/null
	MIX_LOOPBACK=$(pactl load-module module-loopback latency_msec=1 source=$MIX_SOURCE sink=$OUTPUT_SINK)
}

function cleanup() {
	virtual_sink=$(pactl list short modules | grep 'Virtual_Sink' | awk '{print $1;}') # e.g. 30
	[ -z "$virtual_sink" ] && return
	read -p '>> Press enter to unload PulseAudio modules for the virtual mix...'

	[ ! -z "$MIX_LOOPBACK" ] && pactl unload-module $MIX_LOOPBACK || pactl unload-module module-loopback
	pactl list short modules | grep -E 'Virtual_(Sink|Output)' | awk '{print $1;}' | xargs -L1 pactl unload-module
}

function run()
{
	setup
	PRINT ">> Your virtual mix is currently active! Feel free to open e.g. 'pavucontrol' now."
	PRINT 
	PRINT ">> For software that should have their audio included in the mix, move them"
	PRINT "   to the 'Virtual_Sink' under the 'Playback' tab."
	PRINT ">> For software that should capture the mixed audio, head to the 'Recording'"
	PRINT "   tab and make the software use 'Monitor of Virtual_Output' as their input."
	PRINT 
	cleanup
}

function help_prompt()
{
	PRINT 
	PRINT "Enable/disable sound sharing for discord with Pulseaudio"
	PRINT 
	PRINT "Usage: `SCRIPTNAME` [command] [args]"
	PRINT "Example: `SCRIPTNAME` start"
	PRINT
	PRINT "Commands:"
	PRINT "(s) start\tStart the sound sharing"
	PRINT "(i) shell\tUse the interactive shell to work with `SCRIPTNAME`"
	PRINT "(e) exit\t(Shell only) Exit the script"
	PRINT
	PRINT "Miscellaneous:"
	PRINT "(h) help\tShow this help menu"
	PRINT "(v) version\tShow this script's version"
	PRINT 
}

function shell()
{
	while [ "${cmd}" != "exit" ];
	do
		clear
		PRINT "`SCRIPTNAME` Control Center"
		PRINT 
		PRINT "Enter a command or 'help' for a list of commands."
		PRINT 
		read -p "> " cmd

		og_cmd="${cmd}"
		cmd=`LOWERCASE "${cmd}"`

		case "$cmd" in
			s | start )
				run
				PAUSE
				;;
			\? | h | help )
				help_prompt
				PAUSE
				;;
			v | version )
				version
				PAUSE
				;;
			e | exit )
				clear
				exit 0
				;;
			* )
				if [ -z "${cmd}" ];
				then
					EMPTYCMD
					PAUSE
				else
					INVALID "${cmd}"
					PAUSE
				fi
				;;
		esac
	done
}

cmd=`LOWERCASE "${1}"`

case "${cmd}" in
	s | start )
		run
		;;
	\? | h | help )
		help_prompt
		;;
	v | version )
		VERSION
		;;
	i | shell )
		shell
		;;
	* )
		if [ -z "${cmd}" ];
		then
			EMPTYCMD
		else
			INVALID "${cmd}"
		fi
		;;
esac
