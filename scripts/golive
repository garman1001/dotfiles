#!/usr/bin/env bash

##############################################
#	Author: Nidia Achrys
#	Project: golive
#	Version: 1.0
#
#	Usage: golive [command] [args]
#
#	Description:
#		Force pulseaudio to use settings that allows
#		linux users to share audio via Discord's
#		golive feature
##############################################

version='1.0'
author='Nidia Achrys'

# Source common script functions
source $SCRIPTS/headers/02-api.sh

#############
# Core Code #
#############

api.DEPENDENCY "pactl"

function setup() {
	pactl list short modules | grep -q 'Virtual_Sink' && return

	if [ -z "$MIC_SOURCE" ]; then
		first_source=$(pactl list short sources | head -1 | awk '{print $1;}') # e.g. 0
		pactl list short sources
		read -p ">> Source (input) number to use [$first_source]: " user_source
		[ -z "$user_source" ] && user_source=$first_source
		MIC_SOURCE=$user_source
		api.PRINT 
		first_sink=$(pactl list short sinks | head -1 | awk '{print $1;}') # e.g. 1
		pactl list short sinks
		read -p ">> Sink (output) number to use [$first_sink]: " user_sink
		[ -z "$user_sink" ] && user_sink=$first_sink
		OUTPUT_SINK=$user_sink
		api.PRINT 
	fi

	pactl load-module module-null-sink sink_name=Virtual_Output sink_properties=device.description=Virtual_Output > /dev/null
	pactl load-module module-null-sink sink_name=Virtual_Sink sink_properties=device.description=Virtual_Sink > /dev/null
	MIX_SOURCE=$(pactl list short sources | grep 'Virtual_Sink' | awk '{print $1;}') # e.g. 14

	pactl load-module module-loopback latency_msec=1 source=$MIC_SOURCE sink=Virtual_Output > /dev/null
	pactl load-module module-loopback latency_msec=1 source=$MIX_SOURCE sink=Virtual_Output > /dev/null
	MIX_LOOPBACK=$(pactl load-module module-loopback latency_msec=1 source=$MIX_SOURCE sink=$OUTPUT_SINK)
}

function cleanup() {
	virtual_sink=$(pactl list short modules | grep 'Virtual_Sink' | awk '{print $1;}') # e.g. 30
	[ -z "$virtual_sink" ] && return
	read -p '>> Press enter to unload PulseAudio modules for the virtual mix...'

	[ ! -z "$MIX_LOOPBACK" ] && pactl unload-module $MIX_LOOPBACK || pactl unload-module module-loopback
	pactl list short modules | grep -E 'Virtual_(Sink|Output)' | awk '{print $1;}' | xargs -L1 pactl unload-module
}

function run()
{
	setup
	api.PRINT ">> Your virtual mix is currently active! Feel free to open e.g. 'pavucontrol' now."
	api.PRINT 
	api.PRINT ">> For software that should have their audio included in the mix, move them"
	api.PRINT "   to the 'Virtual_Sink' under the 'Playback' tab."
	api.PRINT ">> For software that should capture the mixed audio, head to the 'Recording'"
	api.PRINT "   tab and make the software use 'Monitor of Virtual_Output' as their input."
	api.PRINT 
	cleanup
}

function help_prompt()
{
	api.PRINT 
	api.PRINT "Enable/disable sound sharing for discord with Pulseaudio"
	api.PRINT 
	api.PRINT "Usage: `api.SCRIPTNAME` [command] [args]"
	api.PRINT "Example: `api.SCRIPTNAME` start"
	api.PRINT
	api.PRINT "Commands:"
	api.PRINT "(s) start\tStart the sound sharing"
	api.PRINT "(i) shell\tUse the interactive shell to work with `api.SCRIPTNAME`"
	api.PRINT "(e) exit\t(Shell only) Exit the script"
	api.PRINT
	api.PRINT "Miscellaneous:"
	api.PRINT "(h) help\tShow this help menu"
	api.PRINT "(v) version\tShow this script's version"
	api.PRINT 
}

cmd=`api.LOWERCASE "${1}"`

case "${cmd}" in
	s | start )
		run
		;;
	\? | h | help )
		help_prompt
		;;
	v | version )
		api.VERSION
		;;
	* )
		if [ -z "${cmd}" ];
		then
			api.EMPTYCMD
		else
			api.INVALID "${cmd}"
		fi
		;;
esac
