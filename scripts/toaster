#!/usr/bin/env bash

##############################################
#	Author: Nidia Achrys
#	Project: toaster
#	Version: 1.0
#
#	Usage: toaster [command] [args]
#
#	Description:
#		Toaster simulator
##############################################

version='1.0'
author='Nidia Achrys'

#######################################################################
#							Helper Functions						  #
#######################################################################

# Replacement for 'echo'
function PRINT()
{
	if [ -z "${1}" ]; then
		printf "\n"
	else
		printf "%b\n" "${1}"
	fi
	return 0
}

# Retrieve the name of the script file
function SCRIPTNAME()
{
	PRINT "${0##*/}"
	return 0
}

# Pauses script execution until the user presses ENTER
function pause()
{
	read -p "Press ENTER to continue..." cmd
	return 0
}

# Converts a string to all lowercase characters
function lowercase()
{
	printf "${1}" | tr "[:upper:]" "[:lower:]"
	return 0
}

# Error message for when an invalid command is used
function invalid()
{
	PRINT 
	PRINT "Invalid command \"${1}\". See \"`SCRIPTNAME` help\"."
	PRINT 
	return 1
}

# Error message for when no command is used
function emptycmd()
{
	PRINT 
	PRINT "You must specify a subcommand. See \"`SCRIPTNAME` help\"."
	PRINT 
	return 1
}

# Checks for a filename in $PATH (commands), if not found then exit with an error
function dependency()
{
	[[ ! `command -v ${1}` ]] && PRINT "'${1}' is required to run this program." && exit 1
}

# Checks to see if the script is being run as root, and if not then exit.
function requireRoot()
{
	if [[ $EUID -ne 0 ]]
	then
		PRINT "This script must be run as root" 1>&2
		exit 1
	fi
}

# Prints the script name and version, as well as copyright, license notice, and 
# author name
function version()
{
	PRINT "`SCRIPTNAME` v${version}"
	PRINT "Copyright (C) `date +"%Y"` ${author}"
	PRINT "License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>."
	PRINT "This is free software: you are free to change and redistribute it."
	PRINT "There is NO WARRANTY, to the extent permitted by law."
	PRINT
	PRINT "Written by ${author}."
	return 0
}

#######################################################################
#								Core Code							  #
#######################################################################

# This is where you put your script's functions, variables, logic, etc.

broken="false"

random()
{
	echo $(( ${RANDOM} % ${1} ))
}

makeToast()
{
	read -p "Pieces > " pieces

	PRINT 
	[[ ! ${pieces} =~ [0-9]+ ]] && PRINT "You must specify a number!" && return 1

	PRINT "Making ${pieces} piece(s) of toast..."
	sleep 3
	PRINT "Made ${pieces} piece(s) of toast."

	PRINT 
	pause
	return 0
}

commitBath()
{
	PRINT 
	PRINT "Committing toaster bath..."
	sleep 3

	successful="`random 2`"

	if [ ! "${broken}" == "false" ]; then
		PRINT "The toaster was previously broken. Find a new toaster?"
		broken="true"
		return 1
	fi

	if [ "${successful}" == "0" ]; then
		PRINT "The toaster wasn't plugged in, and has been damaged by the water."
	else
		PRINT "You have died. Have a nice afterlife!"
	fi

	broken="true"
	sleep 3

	PRINT 
	pause
	return 0
}

throwToaster()
{
	read -p "Target > " target

	PRINT 
	PRINT "You have thrown a toaster at ${target}."
	sleep 3

	successful="`random 2`"

	if [ "${successful}" == "0" ]; then
		PRINT "You didn't aim properly, and the toaster hit the wall."
	else
		PRINT "Your aim was perfect and you hit ${target} in the head."
	fi

	broken="true"

	PRINT 
	pause
	return 0
}

cmd=""

while [[ "${cmd}" != "4" ]]; do
	clear
	PRINT "Toaster Menu"
	PRINT 
	PRINT 
	PRINT "1. Make Toast"
	PRINT "2. Commit Toaster Bath"
	PRINT "3. Throw Toaster"
	PRINT "4. Exit"
	PRINT
	read -p "Choice > " cmd

	case "${cmd}" in

		1 )
			makeToast
			;;
		2 )
			commitBath
			;;
		3 )
			throwToaster
			;;
		4 )
			clear
			exit 0
			;;
		* )
			PRINT "Invalid option. Use the number!"
			;;

	esac
done
