#!/usr/bin/env bash

##############################################
#	Author: Nidia Achrys
#	Project: autostartctl
#	Version: 1.0
#
#	Usage: autostartctl [command] [args]
# 
# Description:
#   This utility provides tools to create, edit, list, and print
#   XDG Autostart desktop entries.
##############################################

version='1.0'
author='Nidia Achrys'

# Source common script functions
source $SCRIPTS/libs/01-api.sh

#############
# Core Code #
#############

# Variables
XDG_AUTOSTART="${HOME}/.config/autostart"
[[ -z "${EDITOR}" ]] && EDITOR=nano

filename=''
file=''
name=''
generic=''
binary=''
icon=''
apptype=''
categories=''
path=''

autostartctl.generateTemplate ()
{
_template="
[Desktop Entry]
Name=${name}
Exec=${binary}
Type=${apptype}
Categories=${categories}
Hidden=true
"

[ -n "${generic}" ] && _template="${_template}\nGenericName=${generic}"
[ -n "${icon}" ] && _template="${_template}\nIcon=${icon}"
[ -n "${path}" ] && _template="${_template}\nPath=${path}"
}

autostartctl.entry.create() {

    filename="${1}"
    [[ -z "${filename}" ]] && read -p "Entry Name: " filename

    file="${XDG_AUTOSTART}/${filename}.desktop"

    [[ -f "${file}" ]] && api.std.failMsg "${filename} already exists!"

    touch ${file}

    read -p "App Name: " name
    read -p "Executable Path: " binary
    read -p "Categories (semicolon separated): " categories
    read -p "Icon Path: " icon
    read -p "Generic Name: " generic

    apptype="Application"
    [[ -z "${categories}" ]] && categories="Utility;"

    # Add entry information to the file
    autostartctl.generateTemplate
    api.std.printLn ${_template} > ${file}

    api.std.logMsg "Created ${filename}!"
    exit 0

}

autostartctl.entry.edit() {

  filename="${1}"
  [[ -z "${filename}" ]] && read -p "Name of Entry: " filename

  file="${XDG_AUTOSTART}/${filename}.desktop"

  if [[ -f "${file}" ]]
  then
    ${EDITOR} ${file}
    api.std.logMsg "Edited ${filename}!"
    exit 0
  else
    api.std.failMsg "Entry ${filename} does not exist!"
  fi
}

autostartctl.entry.edit() {
  filename="${1}"

  [[ -z "${filename}" ]] && read -p "Name of Entry: " filename

  file="${XDG_AUTOSTART}/${filename}.desktop"

  if [[ -e "${file}" ]]
  then
    rm -rf ${file}
    api.std.logMsg "Removed ${filename}!"
    exit 0
  else
    api.std.failMsg "Entry ${filename} does not exist!"
  fi
}

autostartctl.entry.list() {
  ls -1 --group-directories-first ${XDG_AUTOSTART} | sed -e 's/\.desktop//'
  exit 0
}

autostartctl.entry.print() {
  filename="${1}"

  [[ -z "${filename}" ]] && read -p "Name of Entry: " filename

  file="${XDG_AUTOSTART}/${filename}.desktop"

  if [[ -e "${file}" ]]
  then
    api.std.printLn 
    api.std.printLn 
    cat ${file}
    exit 0
  else
    api.std.failMsg "${filename} does not exist!"
  fi
}

autostartctl.help() {
  api.std.printLn 
  api.std.printLn "Manage XDG Autostart desktop entries."
  api.std.printLn
  api.std.printLn "Usage: `api.script.name` [command] [FLAGS]... [VALUES]..." 
  api.std.printLn "Example: `api.script.name` c discord"
  api.std.printLn "Example: `api.script.name` l"
  api.std.printLn
  api.std.printLn "Options: "
  api.std.printLn "(c) create\t\tCreate an autostart entry and exit"
  api.std.printLn "(e) edit\t\tEdit an autostart entry and exit"
  api.std.printLn "(r) remove\t\tRemove an autostart entry and exit"
  api.std.printLn "(l) list\t\tList all entries and exit"
  api.std.printLn "(p) print\t\tDisplay an entry's contents and exit"
  api.std.printLn
  api.std.printLn "Miscellaneous:"
  api.std.printLn "(h) help\t\tDisplay this help and exit"
  api.std.printLn "(v) version\t\tDisplay this script's version and exit"
  exit 0
}

# Creates the autostart directory if it does not already exist.
[[ ! -d "${XDG_AUTOSTART}" ]] && mkdir ${XDG_AUTOSTART}

cmd=`api.string.toLowerCase ${1}`

case "${cmd}" in
  c | create )
    autostartctl.entry.create "${2}"
    ;;
  e | edit )
    autostartctl.entry.edit "${2}"
    ;;
  r | remove )
    autostartctl.entry.edit "${2}"
    ;;
  l | list )
    autostartctl.entry.list
    ;;
  p | print )
    autostartctl.entry.print "${2}"
    ;;
  v | version )
    api.script.version
    ;;
  \? | h | help )
    autostartctl.help
    ;;
  * )
    [ -z "${cmd}" ] && autostartctl.help || api.errors.invalidCommand "${cmd}"
    ;;
esac
