#!/usr/bin/env bash
# Author: Nidia Achrys
# Project: autostartctl
# Version: 1.0
# Description:
#   This utility provides tools to create, edit, list, and print
#   XDG Autostart desktop entries.
#
# Usage: autostartctl [OPTION] [FLAGS]

# Variables
CMDNAME=`basename $0`
VERSION='1.0'
YEAR=$(date +"%Y")
XDG_AUTOSTART="${HOME}/.config/autostart"
[[ -z "${EDITOR}" ]] && EDITOR=nano

filename=''
file=''
name=''
generic=''
binary=''
icon=''
apptype=''
categories=''
path=''

# Functions
append() {
  tee -a ${XDG_AUTOSTART}/${filename}.desktop
}

err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: ${@}"
}

makeEntry() {
  [[ -z "${filename}" ]] && read -p "New Entry Name: " filename
  [[ -z "${name}" ]] && read -p "App Name: " name
  [[ -z "${binary}" ]] && read -p "Executable Path: " binary
  [[ -z "${apptype}" ]] && apptype="Application"
  [[ -z "${categories}" ]] && categories="Utility;"

  file="${XDG_AUTOSTART}/${filename}.desktop"

  if [[ ! -e "${file}" ]]
  then
    touch ${file}

    # Add entry information to the file
    echo "[Desktop Entry]" | tee ${file}
    echo "Name=${name}" | append
    [[ -n "${generic}" ]] && echo "GenericName=${generic}" | append
    echo "Exec=${binary}" | append
    [[ -n "${icon}" ]] && echo "Icon=${icon}" | append
    echo "Type=${apptype}" | append
    echo "Categories=${categories}" | append
    echo "Path=${path}" | append
    echo "Hidden=true" | append

    echo "$CMDNAME: Created ${filename}!"
    exit 0
  else
    err "$CMDNAME: ${filename} already exists!"
    exit 1
  fi
}

editEntry() {
  [[ -z "${filename}" ]] && read -p "Name of Entry: " filename

  file="${XDG_AUTOSTART}/${filename}.desktop"

  if [[ -e "${file}" ]]
  then
    ${EDITOR} ${file}
    echo "$CMDNAME: Edited ${filename}!"
    exit 0
  else
    err "$CMDNAME: Entry ${filename} does not exist!"
    exit 1
  fi
}

removeEntry() {
  [[ -z "${filename}" ]] && read -p "Name of Entry: " filename

  file="${XDG_AUTOSTART}/${filename}.desktop"

  if [[ -e "${file}" ]]
  then
    rm -rf ${file}
    echo "$CMDNAME: Removed ${filename}!"
    exit 0
  else
    err "$CMDNAME: Entry ${filename} does not exist!"
    exit 1
  fi
}

listEntries() {
  ls -1 --group-directories-first ${XDG_AUTOSTART} | sed -e 's/\.desktop//'
  exit 0
}

printEntry() {
  [[ -z "${filename}" ]] && read -p "Name of Entry: " filename

  file="${XDG_AUTOSTART}/${filename}.desktop"

  if [[ -e "${file}" ]]
  then
    cat ${file}
    exit 0
  else
    err "$CMDNAME: ${filename} does not exist!"
    exit 1
  fi
}

version()
{
  echo "$CMDNAME $VERSION"
  echo "Copyright (C) $YEAR Nidia Achrys"
  echo "License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>."
  echo "This is free software: you are free to change and redistribute it."
  echo "There is NO WARRANTY, to the extent permitted by law."
  echo
  echo "Written by Nidia Achrys."
  exit 0
}

helpPrompt() {
  echo -e "Usage: $CMDNAME [FLAGS]... [OPTION]"
  echo -e "Manage XDG Autostart desktop entries."
  echo -e "Example: $CMDNAME -C -f fetchcord -n fetchcord -b /usr/bin/fetchcord"
  echo -e "NOTE: If a flag has an asterisk (*) next to it, it's required to create an entry."
  echo -e
  echo -e "Options: "
  echo -e "\t-C, --create\t\tCreate an autostart entry and exit"
  echo -e "\t-E, --edit\t\tEdit an autostart entry and exit"
  echo -e "\t-R, --remove\t\tRemove an autostart entry and exit"
  echo -e "\t-L, --list\t\tList all entries and exit"
  echo -e "\t-P, --print\t\tDisplay an entry's contents and exit"
  echo
  echo -e "Flags:"
  echo -e "\t-f, --filename*\t\tThe file to work with (don't include .desktop)"
  echo -e "\t-n, --name*\t\tThe name of the app"
  echo -e "\t-b, --binary*\t\tThe executable that runs the app"
  echo -e "\t-g, --generic\t\tThe generic name of the app"
  echo -e "\t-i, --icon\t\tThe icon for the app"
  echo -e "\t-t, --type\t\tThe type of app, don't specify unless you know what you're doing"
  echo -e "\t-c, --categories\tThe categories the app is in, seperated by semicolon"
  echo -e "\t-p, --path\t\tThe path where the binary is housed, don't specify unless you know what you're doing"
  echo
  echo -e "Miscellaneous:"
  echo -e "\t-v, --version\t\tDisplay this script's version and exit"
  echo -e "\t-h, ?, --help\t\tDisplay this help and exit"
  exit 0
}

# Creates the autostart directory if it does not already exist.
[[ ! -d "${XDG_AUTOSTART}" ]] && mkdir ${XDG_AUTOSTART}

ARGS=( "$@" )

# Evaluates option flags
for (( i=0 ; i < ${#ARGS[@]} ; i++ ))
do
    j=$(( i + 1 ))
    value="${ARGS[$i]}"
    key="${ARGS[$j]}"

    case "${value}" in
        -f | --filename )
            filename="${key}"
            unset ARGS[$i]
            unset ARGS[$j]
            ;;
        -n | --name )
            name="${key}"
            unset ARGS[$i]
            unset ARGS[$j]
            ;;
        -g | --generic )
            generic="${key}"
            unset ARGS[$i]
            unset ARGS[$j]
            ;;
        -b | --binary )
            binary="${key}"
            unset ARGS[$i]
            unset ARGS[$j]
            ;;
        -i | --icon )
            icon="${key}"
            unset ARGS[$i]
            unset ARGS[$j]
            ;;
        -t | --type )
            apptype="${key}"
            unset ARGS[$i]
            unset ARGS[$j]
            ;;
        -c | --categories )
            categories="${key}"
            unset ARGS[$i]
            unset ARGS[$j]
            ;;
        -p | --path )
            path="${key}"
            unset ARGS[$i]
            unset ARGS[$j]
            ;;
    esac
done

# Evaluates the command, and exits after evaluated.
for (( i=0 ; i < ${#ARGS[@]} ; i++ ))
do
  value="${ARGS[$i]}"

  case "${value}" in
    -C | --create )
      makeEntry
      ;;
    -E | --edit )
      editEntry
      ;;
    -R | --remove )
      removeEntry
      ;;
    -L | --list )
      listEntries
      ;;
    -P | --print )
      printEntry
      ;;
    -v | --version )
      version
      ;;
    -h | \? | --help )
      helpPrompt
      ;;
    * )
      echo "$CMDNAME: Invalid subcommand '${value}'."
      echo "$CMDNAME: See '$CMDNAME ?' for information."
      ;;
   esac
done
