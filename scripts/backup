#!/usr/bin/env bash


### Helper Functions ###
PRINT()
{
	printf "%b\n" "$@"

	return 0
}

PAUSE()
{
	local p=""
	read -p "Press <ENTER> to continue..." p

	return 0
}

LOWER()
{
	printf "%b" "$@" | tr '[:upper:]' '[:lower:]'
}

REQUIRE ()
{
	for arg in "${@}"; do
		if [[ ! -x "$(which $arg)" ]]; then

			PRINT "'${arg}' is required to run this program!"
			exit 1

		fi
	done
}

### Program Dependencies ###
REQUIRE "tar"

### Main Logic ###

# Exclusions file
exclusions="${HOME}/.backup_exclusions"

# Create a new backup tarball
backup.create()
{
	clear

	# If the directory doesn't exist, throw an error and exit
	[[ ! -d "${1}" ]] && PRINT "Invalid destination directory!\n" && PAUSE && clear && return 1

	# Determine the target for the backup
	local target="${1}/${USER}_$(date +%d-%m-%Y).tar.gz"

	# Remove today's previous backup if it exists
	[[ -f "${target}" ]] && rm -rf "${target}"

	# Backups up files, with exclusions if file exists, or without exclusions if no file exists.
	[[ -f "${exclusions}" ]] && tar -zcvpf "${target}" -X "${exclusions}" "${HOME}"
	[[ ! -f "${exclusions}" ]] && tar -zcvpf "${target}" "${HOME}"

	# Confirmation
	PRINT "\n\nBackup finished."
	pause
	clear
}

# Restore a specified backup tarball
backup.restore()
{
	clear

	[[ ! -f "${1}" ]] && PRINT "Invalid tarball!\n" && PAUSE && clear && return 1
	
	pause
	clear
}

# Create/edit the exclusions file
backup.exclusions()
{
	if [[ ! -f "${exclusions}" ]]; then

		touch "${exclusions}"

		for f in ${HOME}/{.,}*; do

			local name="$(basename $f)"

			if [[ "${name}" != "." ]] && [[ "${name}" != ".." ]]; then
				PRINT "${name}" >> ${exclusions}
			fi

		done
	fi

	${EDITOR:-nano} "${exclusions}"
}

# Commands portion of help prompt (columnized)
backup.help.commands()
{
	PRINT "Command|Arguments|Description"
	PRINT "|||"
	PRINT "create|<destination>|Create a new tarball backup"
	PRINT "restore|<backup file>|Restore a tarball backup"
	PRINT "exclusions|n/a|Create/edit a file specifying exclusions from backups"
	PRINT "help|n/a|Show this prompt"
}

# Help prompt
backup.help()
{
	PRINT "backup - Create/restore tarball backups of your HOME directory"
	PRINT 
	backup.help.commands | column -t -s "|"
}

### Argument Handling ###

cmd="$(LOWER $1)"

case "${cmd}" in

	create ) 

		backup.create $2 ;;

	restore ) 

		backup.restore $2 ;;

	exclusions )

		backup.exclusions ;;

	\? | help )
		backup.help ;;

	* )

		[[ $# -eq 0 ]] && backup.help || PRINT "Invalid command!" && exit 1

esac
