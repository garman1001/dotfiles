#!/usr/bin/env bash


### Helper Functions ###
PRINT()
{
	printf "%b\n" "$@"

	return 0
}

PAUSE()
{
	local p=""
	read -p "Press <ENTER> to continue..." p

	return 0
}

LOWER()
{
	printf "%b" "$@" | tr '[:upper:]' '[:lower:]'
}

REQUIRE ()
{
	for arg in "${@}"; do
		if [[ ! -x "$(which $arg)" ]]; then

			PRINT "'${arg}' is required to run this program!"
			exit 1

		fi
	done
}

### Variables ###
exclusions="${HOME}/.backup_exclusions"
method="tar"
ARGS=()

backup.create()
{
	clear

	# If the directory doesn't exist, throw an error and exit
	[[ ! -d "${1}" ]] && PRINT "Invalid destination directory!\n" && PAUSE && clear && exit 1

	# Cleanly exit backup process
	trap 'clear; PRINT "Backup Terminated."; PAUSE; clear; exit 0' SIGTERM SIGINT	

	case "${method}" in	
		tar )
			local target="${1}/${USER}_$(date +%d-%m-%Y).tar.gz"
			[[ -f "${target}" ]] && rm -rf "${target}"

			# Check if tar exists
			REQUIRE "tar"
			
			# Confirmation
			PRINT "Backing up with tar..."
			
			# Backups up files, with exclusions if file exists, or without exclusions if no file exists.
			[[ -f "${exclusions}" ]] && tar -zcvpf "${target}" -X "${exclusions}" "${HOME}"
			[[ ! -f "${exclusions}" ]] && tar -zcvpf "${target}" "${HOME}"
			
			;;
		rsync )
			local target="${1}"
			local dirname="${USER}_$(date +%d-%m-%Y)"
			local final="${target}/${dirname}"
			
			# Check if rsync exists
			REQUIRE "rsync"
			
			# Confirmation
			PRINT "Backing up with rsync..."

			# Backup all files
			[[ -f "${exclusions}" ]] && rsync -azvhP --exclude-from="${exclusions}" "${HOME}" "${target}"
			[[ ! -f "${exclusions}" ]] && rsync -azvhP "${HOME}" "${target}"

			# Remove duplicate backup
			[[ -d "${final}" ]] && rm -rf "${final}"

			# Rename directory
			mv "${target}/${USER}" "${USER}_$(date +%d-%m-%Y)"
			
			;;
		cp )
			local target="${1}"
			local dirname="${USER}_$(date +%d-%m-%Y)"
			local final="${target}/${dirname}"
			
			# Check if rsync exists
			REQUIRE "cp"
			
			# Confirmation
			PRINT "Backing up with cp..."

			# Backup all files
			cp -vr "${HOME}" "${target}"

			
			# Remove duplicate backup
			[[ -d "${final}" ]] && rm -rf "${final}"

			# Rename directory
			mv "${target}/${USER}" "${USER}_$(date +%d-%m-%Y)"
			
			;;
	esac
	
	# Confirmation
	PRINT "\n\nBackup finished."
	PAUSE
	clear
}

backup.restore()
{
	clear

	# Cleanly exit backup process
	trap 'clear; PRINT "Backup Terminated."; PAUSE; clear; exit 0' SIGTERM SIGINT
	
	if [[ -f "${target}" ]] && [[ "${target}" =~ ^*.tar.gz$ ]]; then
	
		# tar
		PRINT "Restoring tarball..."
		
		tar -xvf "${target}" -C "${HOME}"
	
	elif [[ -d "${target}" ]] && [[ -x "$(which rsync)" ]]; then
	
		# rsync
		PRINT "Restoring backup..."
		
		rsync -auv "${target}" "${HOME}"
		
	elif [[ -d "${target}" ]]; then
	
		# cp
		PRINT "Restoring backup..."
		
		cp -vR "${target}" "${HOME}"

	else
	
		# Error
		PRINT "Invalid target!"
		exit 1

	fi
	
	PRINT
	PRINT
	PRINT "Restore Finished"
	PAUSE
	clear
}

# Create/edit the exclusions file
backup.exclusions()
{
	if [[ ! -f "${exclusions}" ]]; then

		touch "${exclusions}"

		for f in ${HOME}/{.,}*; do

			local name="$(basename $f)"

			if [[ "${name}" != "." ]] && [[ "${name}" != ".." ]]; then
				PRINT "${name}" >> ${exclusions}
			fi

		done
	fi

	${EDITOR:-nano} "${exclusions}"
}

# Commands portion of help prompt (columnized)
backup.help.commands()
{
	PRINT "Flags|Arguments|Description"
	PRINT "|||"
	PRINT "-t, --tar||(Default) Uses tar to backup your files"
	PRINT "-r, --rsync||Uses rsync to backup your files"
	PRINT "-c, --cp||Uses cp to backup your files (no exclusions)"
	PRINT "|||"
	PRINT "|||"
	PRINT "Command|Arguments|Description"
	PRINT "|||"
	PRINT "create|<destination>|Create a new backup"
	PRINT "restore|<target>|Restore a backup"
	PRINT "exclusions||Create/edit a file specifying exclusions from backups"
	PRINT "help||Show this prompt"
	exit 0
}

# Help prompt
backup.help()
{
	PRINT "backup - Create/restore tarball backups of your HOME directory"
	PRINT 
	backup.help.commands | column -t -s "|"
}

### Flags ###
for arg in $@; do
	case "$(LOWER $arg)" in
		-r | --rsync )
			method="rsync"
			;;
		
		-t | --tar )
			method="tar"
			;;
			
		-c | --cp )
			method="cp"
			;;
		* )
			ARGS+=("$arg")
			;;
	esac
done

### Argument Handling ###
cmd="$(LOWER ${ARGS[0]})"

case "${cmd}" in

	create ) 

		backup.create ${ARGS[1]} ;;

	restore ) 

		backup.restore ${ARGS[1]} ;;

	exclusions )

		backup.exclusions ;;

	\? | help )
		backup.help ;;

	* )

		[[ $# -eq 0 ]] && backup.help || PRINT "Invalid command!" && exit 1

esac
