#!/usr/bin/env bash

##############################################
#	Author: Nidia Achrys
#	Project: sideload
#	Version: 1.0
#
#	Usage: sideload [command] [args]
# 
# Description:
#   This utility manages AppImages
##############################################

version='1.0'
author='Nidia Achrys'

# Source common script functions
source $SCRIPTS/libs/01-api.sh

#############
# Core Code #
#############

# Help Menu
sideload.help ()
{

	api.std.printLn 
	api.std.printLn "Install/uninstall Appimages"
	api.std.printLn 
	api.std.printLn "Usage: `api.script.name` [command] [args]"
	api.std.printLn "Example: `api.script.name` install ./app.appimage"
	api.std.printLn 
	api.std.printLn "Commands:"
	api.std.printLn "init [shellrc] \t\t\t Initialize Sideload"
	api.std.printLn "(i) install [file] \t\t Install an appimage"
	api.std.printLn "(u) uninstall [name] \t\t Uninstall an appimage"
	api.std.printLn "(l) list \t\t\t List all appimages"
	api.std.printLn 
	api.std.printLn "Miscellaneous"
	api.std.printLn "(h) help \t\t\t Show this prompt"
	api.std.printLn "(v) version \t\t\t Print the version of this script"
	return 0
}

# Initializiation
sideload.init.init ()
{

	if [ -e "$HOME/.sideloadrc" ] && [ -d "$HOME/.Sideload" ]; then

		api.std.failMsg "Sideload is already initialized!"

	else

		# Initialize SIDELOAD Folders
		mkdir $HOME/.Sideload | cd -
		mkdir $HOME/.Sideload/Apps
		mkdir $HOME/.Sideload/Configs

		# Initialize, create, and load sideloadrc file
		touch $HOME/.sideloadrc
		read -t 60 -p "Enter the path to your shellrc file. ex. bashrc or zshrc > " rcpath
		if [ -e "$rcpath" ]; then
			api.std.printLn "if [ -e \".sideloadrc\" ]; then\n	. \$HOME/.sideloadrc" >> $rcpath
			api.std.printLn "	export \$SIDELOAD_ROOT=\$HOME/.Sideload" >> $rcpath
			api.std.printLn "	export \$SIDELOADRC=\$HOME/.sideloadrc" >> $rcpath
			api.std.printLn "	export \$SIDELOAD_APPS=\$HOME/.Sideload/Apps" >> $rcpath
			api.std.printLn "	export \$SIDELOAD_CONFIGS=\$HOME/.Sideload/Configs" >> $rcpath
			api.std.printLn "	export \$SIDELOAD_APPLIST=\$SIDELOAD_CONFIGS/applist.txt\nfi" >> $rcpath
			api.std.printLn "\n\n# Path\nexport \$PATH=\$PATH:\$SIDELOAD_APPS" >> $rcpath
			source $rcpath

			# Initialize applist
			touch $SIDELOAD_APPLIST

			api.std.logMsg "Initialized."

			return 0

		else

			api.std.failMsg "$rcpath does not exist!"

		fi

	fi

}

sideload.app.install ()
{

	local file="$1"

	# Install Program
	mv $file $SIDELOAD_APPS
	chmod $file a+x
	api.std.printLn "$file" >> $SIDELOAD_APPLIST

	# Prompt to ask if the user wants to run the program
	read -p "Do you wish to run the program now? Y/N >> " answer
	if [ "$answer" = "Y" ] || [ "$answer" = "y" ]; then

		./$file

	else

		return 0

	fi

}

sideload.app.uninstall ()
{

	local file="$1"

	cd $SIDELOAD_APPS
	rm -f $file
	rm -f $SIDELOAD_APPLIST
	touch $SIDELOAD_APPLIST
	for OUTPUT in $(ls $SIDELOAD_APPS)
	do

		api.std.printLn "$OUTPUT" >> $SIDELOAD_APPLIST
	done

	return 0

}

sideload.app.list ()
{

	cat $SIDELOAD_APPLIST
	return 0

}

sideload.init.check ()
{
	[ ! -f "${HOME}/.sideloadrc" ] && api.std.failMsg "You must initialize sideload!"
}

command="${1}"
program="${2}"

case "${command}" in
	i | install )
		sideload.init.check
		sideload.app.install $program
		;;

	u | uninstall )
		sideload.init.check
		sideload.app.uninstall $program
		;;

	l | list-apps )
		sideload.init.check
		sideload.app.list
		;;

	\? | h | help )
		sideload.help
		;;

	v | version )
		api.script.version
		;;

	*)
		[ -z "${command}" ] && sideload.help || api.errors.invalidCommand "${command}"
		return 1
		;;
esac

exit $?
