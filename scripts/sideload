#!/usr/bin/env bash

##############################################
#	Author: Nidia Achrys
#	Project: sideload
#	Version: 1.0
#
#	Usage: sideload [command] [args]
# 
# Description:
#   This utility manages AppImages
##############################################

version='1.0'
author='Nidia Achrys'

# Source common script functions
source $SCRIPTS/headers/02-api.sh

#############
# Core Code #
#############

function init_prompt ()
{

	# If .sideloadrc exists, then ask if they want to reset all the configs.
	if [ -e ".sideloadrc" ]; then

		api.PRINT "You already have sideload installed. Do you want to reset all configs?"
		read -p "Y\N >> " answer
		if [ "$answer" = "y" ] || [ "$answer" = "Y" ]; then

			# Sideload Initialization
			initsd

		else

			return 0

		fi

	else

		initsd

	fi

}

# Help Menu
function help_menu ()
{

	api.PRINT 
	api.PRINT "Install/uninstall Appimages"
	api.PRINT 
	api.PRINT "Usage: `api.SCRIPTNAME` [command] [args]"
	api.PRINT "Example: `api.SCRIPTNAME` install ./app.appimage"
	api.PRINT 
	api.PRINT "Commands:"
	api.PRINT "init [shellrc] \t\t\t Initialize Sideload"
	api.PRINT "(i) install [file] \t\t Install an appimage"
	api.PRINT "(u) uninstall [name] \t\t Uninstall an appimage"
	api.PRINT "(l) list \t\t\t List all appimages"
	api.PRINT 
	api.PRINT "Miscellaneous"
	api.PRINT "(h) help \t\t\t Show this prompt"
	api.PRINT "(v) version \t\t\t Print the version of this script"
	return 0
}

# Sideload Initialization
function initsd ()
{

	if [ -e "$HOME/.sideloadrc" ] && [ -d "$HOME/.Sideload" ]; then

		api.FAIL "Sideload is already initialized!"

	else

		# Initialize SIDELOAD Folders
		mkdir $HOME/.Sideload | cd -
		mkdir $HOME/.Sideload/Apps
		mkdir $HOME/.Sideload/Configs

		# Initialize, create, and load sideloadrc file
		touch $HOME/.sideloadrc
		read -t 60 -p "Enter the path to your shellrc file. ex. bashrc or zshrc > " rcpath
		if [ -e "$rcpath" ]; then
			api.PRINT "if [ -e \".sideloadrc\" ]; then\n	. \$HOME/.sideloadrc" >> $rcpath
			api.PRINT "	export \$SIDELOAD_ROOT=\$HOME/.Sideload" >> $rcpath
			api.PRINT "	export \$SIDELOADRC=\$HOME/.sideloadrc" >> $rcpath
			api.PRINT "	export \$SIDELOAD_APPS=\$HOME/.Sideload/Apps" >> $rcpath
			api.PRINT "	export \$SIDELOAD_CONFIGS=\$HOME/.Sideload/Configs" >> $rcpath
			api.PRINT "	export \$SIDELOAD_APPLIST=\$SIDELOAD_CONFIGS/applist.txt\nfi" >> $rcpath
			api.PRINT "\n\n# Path\nexport \$PATH=\$PATH:\$SIDELOAD_APPS" >> $rcpath
			source $rcpath

			# Initialize applist
			touch $SIDELOAD_APPLIST

			api.LOG "Initialized."

			return 0

		else

			api.FAIL "$rcpath does not exist!"

		fi

	fi

}

function install_app ()
{

	local file="$1"

	# Install Program
	mv $file $SIDELOAD_APPS
	chmod $file a+x
	api.PRINT "$file" >> $SIDELOAD_APPLIST

	# Prompt to ask if the user wants to run the program
	read -p "Do you wish to run the program now? Y/N >> " answer
	if [ "$answer" = "Y" ] || [ "$answer" = "y" ]; then

		./$file

	else

		return 0

	fi

}

function uninstall_app ()
{

	local file="$1"

	cd $SIDELOAD_APPS
	rm -f $file
	rm -f $SIDELOAD_APPLIST
	touch $SIDELOAD_APPLIST
	for OUTPUT in $(ls $SIDELOAD_APPS)
	do

		api.PRINT "$OUTPUT" >> $SIDELOAD_APPLIST
	done

	return 0

}

function list_apps ()
{

	cat $SIDELOAD_APPLIST
	return 0

}

function checkInit ()
{
	[ ! -f "${HOME}/.sideloadrc" ] && api.FAIL "You must initialize sideload!"
}

command="${1}"
program="${2}"

case "${command}" in
	i | install )
		checkInit
		install_app $program
		;;

	u | uninstall )
		checkInit
		uninstall_app $program
		;;

	l | list-apps )
		checkInit
		list_apps
		;;

	\? | h | help )
		help_menu
		;;

	v | version )
		api.VERSION
		;;

	*)
		[ -z "${command}" ] && help_menu || api.INVALID "${command}"
		return 1
		;;
esac

exit $?
